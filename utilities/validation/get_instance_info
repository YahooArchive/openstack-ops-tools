#!/usr/bin/env python
"""
Get info for all instances in an openstack cluster from both openstack/nova
directly and from libvirt on the hypervisor nodes.

This script does the following:
   * Gets a list of instances from libvirt on all the hypervisors
   * Gets a list of all instances from nova on the current node
   * Does a "nova show" to get the instance state, hypervisor and ip address
   * If there is an IP address assigned tests network using ping
   * Aggregates all the data together by hypervisor/instance
"""
__license__ = """
 Copyright (c) 2013 Yahoo! Inc. All rights reserved.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License. See accompanying LICENSE file.
"""
import os
import sys
import getpass
import collections
import optparse
import json
import logging
import socket
import multiprocessing
import sshmap
import hostlists


def ping(ipaddress, timeout=30):
    """
    Ping a host or ip address once and return up or down
    :param ipaddress:
    :return:
    """
    rc = os.system(
        'ping -c1 -W%d %s > /dev/null 2>&1' % (timeout, ipaddress)) >> 8
    if rc:
        return 'Down'
    return 'Up'


def get_user_id_list():
    """
    Get a dict of ids and usernames
    """
    user_list = {}
    logging.info('Getting user names and ids from keystone')
    for line in os.popen('keystone user-list').readlines():
        if line.strip().startswith('|'):
            splitline = line.split('|')
            id = splitline[1].strip()
            name = splitline[2].strip()
            email = splitline[4].strip()
            user_list[id] = (name, email)
    return user_list


def get_hypervisor_instance_info(host_range=None):
    """
    Connect to a bunch of hypervisors and get instance information from
    libvirt.
    :param host_range: hostlists range of hypervisors
    """
    vm_info = collections.defaultdict(lambda: None)

    logging.info('Getting the instance information from libvirt on the '
                 'hypervisors')
    if not host_range:
        host_range = 'openstack_hv:%s' % os.environ['OPENSTACK_CLUSTER']
    # Get the info from libvirt on the hypervisors first
    for result in sshmap.run(
            host_range=host_range,
            command='virsh list --all|egrep -v ^\$\|Id\|\"^-\"', sudo=True,
            password=getpass.getpass('Sudo Password:')):
        logging.debug(
            'Processing libvirt info from hypervisor %s', result.host)
        vm_info[result.host] = {}
        for line in result.out:
            items = line.strip().split()
            vm_info[result.host][items[1]] = {'libvirt_id': items[0],
                                              'libvirt_state': items[2]}
    return vm_info


def get_single_instance_hypervisor(values):
    """
    Get the hypervisor and the nova instanceid of a single instance
    :param values:
    :values:
    """
    openstack_id, name, state, ipaddress, hypervisor, instanceid = values
    ping_result = 'Unknown'
    user_id = 'Unknown'
    logging.debug(
        'Getting instance attributes for openstack instance %s', openstack_id)
    for line2 in os.popen('nova show %s' % openstack_id).readlines():
        sline2 = line2.strip().split('|')
        if len(sline2) > 2:
            property_name = sline2[1].strip()
            value = sline2[2].strip()
            if property_name in [
                'OS-EXT-SRV-ATTR:host',
                'OS-EXT-SRV-ATTR:hypervisor_hostname']:
                hypervisor = value
            if property_name in ['OS-EXT-SRV-ATTR:instance_name']:
                instanceid = value
            if property_name == 'user_id':
                user_id = value
            #print property,'=',value
            if ipaddress:
                ping_result = ping(ipaddress, timeout=1)
    return openstack_id, name, state, ipaddress, instanceid, hypervisor, \
           ping_result, user_id


def get_hypervisor_instances(hypervisor):
    """
    Get instances on a hypervisor from nova
    :hypervisor:
    """
    logging.debug(
        'Getting nova instance information for instances running on %s',
        hypervisor)
    ID = 1
    NAME = 2
    STATE = 3
    IP = 4
    result = []
    for line in os.popen(
            'nova list --all-tenants --host %s' % hypervisor).readlines():
        sline = line.strip().split('|')
        if len(sline) > 3:
            openstack_id = sline[ID].strip()
            name = sline[NAME].strip()
            state = sline[STATE].strip()
            ipaddress = sline[IP].strip().split('=')[-1]
            if len(ipaddress.split('.')) != 4:
                ipaddress = None
            hypervisor = "Unknown"
            instanceid = "Unknown"
            if openstack_id != 'ID':
                result.append(
                    (
                        openstack_id, name, state, ipaddress, hypervisor,
                        instanceid
                    )
                )
    logging.debug('Found nova instances %s', result)
    return result


# Get the info from nova
def get_all_nova_instance_info(vm_info=None, processes=10):
    """
    Get instance information from nova and update vm_info if it is passed
    :param vm_info:
    :processes:
    """
    logging.info('Getting all instance info from nova')
    if not vm_info:
        vm_info = collections.defaultdict(lambda:{})

    if isinstance(processes, int) and processes > 0 and processes < 30:
        pass
    else:
        processes = 10
    process_pool = multiprocessing.Pool(processes=processes)

    # Get the instances running on the hypervisors from nova
    nova_instances = []
    for result in process_pool.imap(get_hypervisor_instances, vm_info.keys()):
        nova_instances += result

    # Get more attributes for each instance from nova and add to vm_info
    for openstack_id, name, state, ipaddress, instanceid, hypervisor, \
        ping_result, user_id in process_pool.imap(
            get_single_instance_hypervisor, nova_instances):
        #print('%s\t%s\t%s\t%s\t%s' % (name, id, instanceid, state,
        # hypervisor))
        try:
            if hypervisor not in vm_info.keys():
                vm_info[hypervisor] = {}
            if instanceid not in vm_info[hypervisor].keys():
                vm_info[hypervisor][instanceid]={}
            vm_info[hypervisor][instanceid]['name'] = name
            vm_info[hypervisor][instanceid]['nova_state'] = state
            vm_info[hypervisor][instanceid]['ipaddress'] = ipaddress
            if openstack_id:
                vm_info[hypervisor][instanceid]['openstack_id'] = openstack_id
            if user_id:
                vm_info[hypervisor][instanceid]['user_id'] = user_id
                if user_id in keystone_user_ids.keys():
                    vm_info[hypervisor][instanceid][
                        'user'] = keystone_user_ids[user_id][0]
                    vm_info[hypervisor][instanceid][
                    'user_email'] = keystone_user_ids[user_id][1]
            if ping_result:
                vm_info[hypervisor][instanceid]['ping'] = ping_result
        except (KeyError, TypeError):
            vm_info[hypervisor][instanceid] = {'name': name,
                                               'nova_state': state,
                                               'ip_address': ipaddress}
    return vm_info


def remove_extra_hypervisors(host_range, vm_info):
    """
    Remove any extra hypervisors that were not in the specified range from
    vm_info
    """
    hosts = hostlists.expand(host_range)
    new_vm_info = collections.defaultdict(lambda:{})
    for hypervisor, value in vm_info.items():
        if hypervisor in hosts:
            new_vm_info[hypervisor] = value
    return new_vm_info


def remove_empty_entries(vm_info):
    """
    Remove any hosts that have no data in case we are passed a range including
    non-hypervisor nodes.
    :param vm_info:
    """
    new_vm_info = collections.defaultdict(lambda:{})
    for hypervisor, value in vm_info.items():
        if value:
            new_vm_info[hypervisor] = value
    return new_vm_info


if __name__ == '__main__':
    # Set the default log level, even if there was a logging message prior
    # to this point
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    logging.basicConfig(
        format=socket.gethostname()+" %(asctime)s: [%(levelname)s] "
                                    "%(message)s",
        level=logging.INFO)

    # Parse command line arguements
    parser = optparse.OptionParser(usage='get_instance_info hostlists')
    parser.add_option(
        "--json", dest="json", default=False, action="store_true",
        help="Display output in json format")
    parser.add_option(
        "--jobs", dest="jobs", default=10, type='int',
        help="Number of parallel connections to openstack to use")
    parser.add_option(
        "--only_in_range", dest="only_in_range",
        default=False, action="store_true",
        help="Only give information for the hypervisors specified")
    parser.add_option(
        "--log_level", dest="log_level", default='',
        choices=['', 'debug', 'info', 'warn', 'error'],
        help='Set the default log level [debug, info, warn, error] default: '
             'info'
    )
    (options, command_args) = parser.parse_args()

    # Set the logging level based on the command line input
    level = logging.INFO
    if options.log_level.lower() == 'warn':
        level = logging.WARN
    elif options.log_level.lower() == 'info':
        level = logging.INFO
    elif options.log_level.lower() == 'debug':
        level = logging.DEBUG
    if not options.log_level:
        if options.json:
            level = logging.ERROR
        else:
            level = logging.INFO
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    logging.basicConfig(
        format=socket.gethostname()+" %(asctime)s: [%(levelname)s] "
                                    "%(message)s",
        level=level)

    # Prevent ssh module debug messages flooding our screen
    ssh_log = logging.getLogger('ssh')
    ssh_log.setLevel(logging.WARNING)

    # Get the hostlists range of hypervisors
    host_range = ' '.join(command_args)

    # Set the hostlist range to use the openstack plugin to get host list
    if not host_range.strip() and 'OPENSTACK_CLUSTER' in os.environ.keys():
        host_range = 'openstack_hv:%s' % os.environ['OPENSTACK_CLUSTER']

    # Get the userids
    keystone_user_ids = get_user_id_list()

    # Go get the information
    vm_info = get_hypervisor_instance_info(host_range)
    vm_info = get_all_nova_instance_info(vm_info, processes=options.jobs)
    vm_info = remove_empty_entries(vm_info)

    if options.only_in_range:
        logging.debug('Removing any extra hypervisors from output')
        vm_info = remove_extra_hypervisors(host_range, vm_info)

    # Output the results
    if options.json:
        print(json.dumps(vm_info, indent=4, sort_keys=True))
    else:
        fmt='|%-34.34s|%-16.16s|%-18.18s|%-12.12s|%-34.34s|%-12.12s|%-12.12s|%-24.324s|%-16.16s|%-6.6s|'
        frame = fmt % (list('----------')).replace('|','+')
        print(frame)
        print(
            fmt % (
                'Hypervisor','Inst Name', 'LV Id',
                'LV State', 'OS Id', 'OS State',
                'User', 'Email', 'IP', 'Ping'
            )
        )
        print(frame)
        for hypervisor, value in vm_info.items():
            for instance, value2 in value.items():
                for key in [
                    'name', 'libvirt_state', 'openstack_id', 'nova_state',
                    'user', 'user_email', 'ipaddress', 'ping']:
                    if key not in value2.keys():
                        value2[key] = ''
                print(
                    fmt % (
                        hypervisor, value2['name'], instance,
                        value2['libvirt_state'], value2['openstack_id'],
                        value2['nova_state'], value2['user'],
                        value2['user_email'], value2['ipaddress'],
                        value2['ping']
                    )
                )
        print(frame)
